!
! Copyright (C) 2013 EXCITING team at Berlin and Dr.Anton Kozhevnikov at CSCS.
! This file is distributed under the terms of the GNU General Public License.
! See the file COPYING for license details.
! 
! 2018 L.Zhang at UFL adopted to EXCITING-PLUS(EP) code, to interface to SIRIUS library. 
!
Module mod_sirius

  use sirius
  use ISO_C_BINDING, only: C_PTR, C_NULL_PTR, C_BOOL

!---------------------------------!
!     miscellaneous variables     !
!---------------------------------!

#ifdef _SIRIUS_
  type(C_PTR) :: sctx = C_NULL_PTR
  type(C_PTR) :: gs_handler = C_NULL_PTR
  type(C_PTR) :: ks_handler = C_NULL_PTR
#endif

!---------------------------------!
!        control switches         !
!---------------------------------!

! ---- the global on/off switch that makes ALL other switches effective

  logical :: use_sirius_library


! ---- these are the tasks that we want SIRIUS to do 

! let sirius generate Hartree potential (solve Poisson equation)
  logical, parameter :: use_sirius_vha           = .false.
! let sirius generate exchange-correlation potential 
  logical, parameter :: use_sirius_vxc           = .false.
! let sirius solve the eigen problem (diagonalisation)
  logical, parameter :: use_sirius_eigen_states  = .false.
! let sirius generate charge density 
  logical, parameter :: use_sirius_density       = .false.
! let sirius generate the step-function
  logical, parameter :: use_sirius_cfun          = .false.
! let sirius generate G-vectors
  logical, parameter :: use_sirius_gvec          = .true.


! ---- these are set to .false. at the moment , we generate them in EP side and pass to SIRIUS

! let sirius solve radial equations
  logical, parameter :: use_sirius_radial_solver = .false.
! let sirius generate apw radial functions
  logical, parameter :: use_sirius_apwfr         = .false. 
! let sirius generate lo radial functions
  logical, parameter :: use_sirius_lofr          = .false.
! let sirius generate overlap radial integrals
  logical, parameter :: use_sirius_olprad        = .false.
! let sirius generate Hamiltonian radial integrals 
  logical, parameter :: use_sirius_hmlrad        = .false. 


! ---- these are assumed doesn't matter much, can be true or false

! let sirius generate initial charge density
  logical, parameter :: use_sirius_rhoinit       = .false.
! let sirius determine linearization energy automatically
  logical, parameter :: use_sirius_autoenu       = .false.


  character*100, parameter :: sirius_error = " The code is not compiled with SIRIUS library. "

End Module



!
! Below are the original setting used by EXCITING.
!
!------------------------------------------------------------------------------!
! Warning! Not all combinations of switches are valid! Know what you are doing !
!          before changing the values!                                         !
!------------------------------------------------------------------------------!
! use siriust to get FFT related variables
!      logical, parameter :: usesirius_gridsize = .true.
! use sirius to generate G-vectors
!      logical, parameter :: usesirius_gvec = .true.
! use sirius to generate G-vector spherical harmonics
!      logical, parameter :: usesirius_ylmg = .true.
! use sirius to generate structure factors of the G-vectors
!      logical :: usesirius_sfacg
! use sirius to generate step (characteristic) function
!      logical :: usesirius_cfun
! use sirius to generate G+k vector related arrays
!      logical, parameter :: usesirius_gkvec = .true.
! use sirius to get maximum number of G+k vectors
!      logical, parameter :: usesirius_ngkmax = .true.
! use sirius for autoenu
!      logical, parameter :: usesirius_autoenu = .false.
! use sirius to generate augmented wave radial functions
!      logical, parameter :: usesirius_apwfr = .false.
! use sirius to generate local orbitals
!      logical, parameter :: usesirius_lofr = .false.
! use sirius to solve radial equations
!      logical, parameter :: usesirius_radial_solver = .false.
! use sirius to generate matching coefficients
!      logical, parameter :: usesirius_match = .false. 
! use sirius to setup first-variational H and O matrices
!      logical, parameter :: usesirius_fvho = .false.
!      logical, parameter :: usesirius_solve_fv = .false.
! use sirius to find the eigen states
!      logical :: usesirius_eigen_states
! use sirius to construct charge density
!      logical :: usesirius_density
! use sirius to generate XC related functions and energies
!      logical :: usesirius_xc 
! use sirius to generate Hartree potential
!      logical :: usesirius_vha 
! use sirius to generate Hartree potential
!      logical, parameter :: usesirius_meffig = .false.
! use sirius to generate the whole effective potential
!      logical, parameter :: usesirius_poteff = .false. 
! use sirius to calculate Hamiltonian radial integrals
!      logical, parameter :: usesirius_hmlrad = .false.
! use sirius to calculate overlap radial integrals
!      logical, parameter :: usesirius_olprad = .false.
! use sirius to initialize density
!      logical :: usesirius_rhoinit 
! use sirius to calculate forces
!      logical, parameter :: usesirius_force = .false. 
!
!      character*100, parameter :: sirius_error = "Not compiled with SIRIUS"
!
!End Module
!
